import json
import aiohttp
import asyncio
import websockets
import logging
from typing import Dict, Any, List, AsyncGenerator

logger = logging.getLogger(__name__)

class BlockPlainConnector:
    """Connector for BlockPlain blockchain data"""
    
    def __init__(self, api_url: str, ws_url: str):
        self.api_url = api_url
        self.ws_url = ws_url
        self.session = None
        self.websocket = None
        
    async def connect(self):
        """Connect to BlockPlain API"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
        
    async def close(self):
        """Close connections"""
        if self.session:
            await self.session.close()
            self.session = None
        
        if self.websocket:
            await self.websocket.close()
            self.websocket = None
    
    async def get_blocks(self) -> List[Dict[str, Any]]:
        """Get all blocks from the blockchain"""
        await self.connect()
        async with self.session.get(f"{self.api_url}/blocks") as response:
            return await response.json()
    
    async def get_block(self, x: int, y: int) -> Dict[str, Any]:
        """Get specific block by coordinates"""
        await self.connect()
        async with self.session.get(f"{self.api_url}/blocks/{x}/{y}") as response:
            if response.status == 404:
                return None
            return await response.json()
    
    async def get_transactions(self) -> List[Dict[str, Any]]:
        """Get current transactions in the pool"""
        await self.connect()
        async with self.session.get(f"{self.api_url}/transactions") as response:
            return await response.json()
    
    async def get_state(self) -> Dict[str, Any]:
        """Get blockchain state summary"""
        await self.connect()
        async with self.session.get(f"{self.api_url}/state") as response:
            return await response.json()
    
    async def stream_updates(self) -> AsyncGenerator[Dict[str, Any], None]:
        """Stream real-time updates from the blockchain"""
        try:
            self.websocket = await websockets.connect(self.ws_url)
            logger.info(f"Connected to BlockPlain WebSocket at {self.ws_url}")
            
            while True:
                message = await self.websocket.recv()
                data = json.loads(message)
                yield data
        except Exception as e:
            logger.error(f"WebSocket error: {e}")
            # Reconnect after a delay
            await asyncio.sleep(5)
            async for update in self.stream_updates():
                yield update